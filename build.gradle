plugins {
	id 'com.github.johnrengelman.shadow' version "5.2.0"
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
	id 'java-library'
}

allprojects {
	apply plugin: 'com.github.johnrengelman.shadow'
	apply plugin: 'fabric-loom'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	archivesBaseName = project.archives_base_name
	version = project.mod_version
	group = project.maven_group

	repositories {
		maven { url "https://jitpack.io" }
		maven { url "https://hephaestus.dev/release" }
	}

	dependencies {
		// Minecraft + Yarn
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

		// Fabric Loader + FAPI
		modCompile "net.fabricmc:fabric-loader:${project.loader_version}"
		modImplementation fabricApi.module("fabric-api-base", project.fabric_version)
		modImplementation fabricApi.module("fabric-networking-api-v1", project.fabric_version)
		modImplementation fabricApi.module("fabric-lifecycle-events-v1", project.fabric_version)

		// Transporter
		modApi "com.github.LazuriteMC:Transporter:${project.transporter_version}"
		include "com.github.LazuriteMC:Transporter:${project.transporter_version}"

		// Hermes
		modImplementation "dev.inkwell:hermes:${project.hermes_version}"

		// Zip4j
		implementation "net.lingala.zip4j:zip4j:${project.zip4j_version}"
		shadow "net.lingala.zip4j:zip4j:${project.zip4j_version}"

		// LibBulletJME
		compile "com.github.stephengold:Libbulletjme:${project.libbulletjme_version}"
		shadow "com.github.stephengold:Libbulletjme:${project.libbulletjme_version}"

		// Immersive Portals
		modImplementation('com.github.qouteall.ImmersivePortalsMod:imm_ptl_core:1.16-SNAPSHOT') {
			exclude(group: "net.fabricmc.fabric-api")
		}
	}

	processResources {
		inputs.property "version", project.version

		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": project.version
		}

		from(sourceSets.main.resources.srcDirs) {
			exclude "fabric.mod.json"
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}
}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

shadowJar {
	configurations = [project.configurations.shadow]
}

jar {
	from "LICENSE"
}

remapJar {
	dependsOn shadowJar
	input.set shadowJar.archiveFile.get()
}

dependencies {
	afterEvaluate {
		subprojects.each {
			api it
			include it
		}
	}
}

subprojects {
	apply plugin: 'fabric-loom'
	apply plugin: 'java-library'
	archivesBaseName = project.name
	group = "${rootProject.group}.${rootProject.archivesBaseName}"

	dependencies {
		compile sourceSets.main.output
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		mavenLocal()
	}
}