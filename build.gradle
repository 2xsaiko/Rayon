import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

plugins {
	id 'com.github.johnrengelman.shadow' version "5.2.0"
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
}

subprojects {
	apply plugin: 'fabric-loom'
	archivesBaseName = rootProject.archives_base_name + "-" + project.name
	group = rootProject.maven_group + "." + rootProject.archives_base_name

	dependencies {
		compile rootProject.sourceSets.main.output
	}
}

allprojects {
	apply plugin: 'com.github.johnrengelman.shadow'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	archivesBaseName = project.archives_base_name
	version = project.mod_version
	group = project.maven_group

	sourceSets {
		example {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	minecraft {
		accessWidener "src/main/resources/rayon.accesswidener"
	}

	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
		modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"

		implementation "cz.advel.jbullet:jbullet:${project.jbullet_version}"
		shadow "cz.advel.jbullet:jbullet:${project.jbullet_version}"
	}

	processResources {
		inputs.property "version", project.version

		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": project.version
		}

		from(sourceSets.main.resources.srcDirs) {
			exclude "fabric.mod.json"
		}
	}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = "sources"
		from sourceSets.main.allSource
	}

	shadowJar {
		configurations = [project.configurations.shadow]
	}

	jar {
		from "LICENSE"
	}

	task relocateShadowJar(type: ConfigureShadowRelocation) {
		target = tasks.shadowJar
	}

	tasks.shadowJar.dependsOn tasks.relocateShadowJar

	remapJar {
		dependsOn shadowJar
		input.set shadowJar.archiveFile.get()
	}

// configure the maven publication
	publishing {
		publications {
			mavenJava(MavenPublication) {
				// add all the jars that should be included when publishing to maven
				artifact(remapJar) {
					builtBy remapJar
				}
				artifact(sourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}

		// select the repositories you want to publish to
		repositories {
			// uncomment to publish to the local maven
			// mavenLocal()
		}
	}
}
